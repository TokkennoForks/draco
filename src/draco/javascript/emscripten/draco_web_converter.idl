// Encoder

enum draco_GeometryAttribute_Type {
  "draco_GeometryAttribute::INVALID",
  "draco_GeometryAttribute::POSITION",
  "draco_GeometryAttribute::NORMAL",
  "draco_GeometryAttribute::COLOR",
  "draco_GeometryAttribute::TEX_COORD",
  "draco_GeometryAttribute::GENERIC"
};

[Prefix="draco::"]
interface GeometryAttribute {
  void GeometryAttribute();
};

enum draco_EncodedGeometryType {
  "draco::INVALID_GEOMETRY_TYPE",
  "draco::POINT_CLOUD",
  "draco::TRIANGULAR_MESH"
};

enum draco_MeshEncoderMethod {
  "draco::MESH_SEQUENTIAL_ENCODING",
  "draco::MESH_EDGEBREAKER_ENCODING"
};

[Prefix="draco::"]
interface PointAttribute {
  void PointAttribute();
  long size();

  // From GeometryAttribute
  long attribute_type();
  long data_type();
  byte num_components();
  boolean normalized();
  long byte_stride();
  long byte_offset();
  long unique_id();
};

[Prefix="draco::"]
interface PointCloud {
  void PointCloud();

  long num_attributes();
  long num_points();
};

[Prefix="draco::"]
interface Mesh : PointCloud {
  void Mesh();
  long num_faces();

  // From PointCloud
  long num_attributes();
  long num_points();
  void set_num_points(long num_points);
};

[Prefix="draco::"]
interface Metadata {
  void Metadata();
};

interface DracoInt8Array {
  void DracoInt8Array();
  long GetValue(long index);
  long size();
};

interface MetadataBuilder {
  void MetadataBuilder();

  boolean AddStringEntry(Metadata metadata,
                         [Const] DOMString entry_name,
                         [Const] DOMString entry_value);
  boolean AddIntEntry(Metadata metadata,
                      [Const] DOMString entry_name,
                      long entry_value);
  boolean AddDoubleEntry(Metadata metadata,
                         [Const] DOMString entry_name,
                         double entry_value);
};

interface PointCloudBuilder {
  void PointCloudBuilder();
  long AddFloatAttribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] float[] att_values);
  long AddInt8Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                        long num_vertices, long num_components,
                        [Const] byte[] att_values);
  long AddUInt8Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] octet[] att_values);
  long AddInt16Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] short[] att_values);
  long AddUInt16Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                          long num_vertices, long num_components,
                          [Const] unsigned short[] att_values);
  long AddInt32Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] long[] att_values);
  long AddUInt32Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                          long num_vertices, long num_components,
                          [Const] unsigned long[] att_values);

  boolean AddMetadata(PointCloud pc, [Const] Metadata metadata);
  boolean SetMetadataForAttribute(PointCloud pc, long attribute_id,
                                  [Const] Metadata metadata);
};

interface MeshBuilder : PointCloudBuilder {
  void MeshBuilder();

  boolean AddFacesToMesh(Mesh mesh, long num_faces, [Const] long[] faces);

  // Deprecated.
  long AddFloatAttributeToMesh(Mesh mesh, draco_GeometryAttribute_Type type,
                               long num_vertices, long num_components,
                               [Const] float[] att_values);
  // Deprecated.
  long AddInt32AttributeToMesh(Mesh mesh, draco_GeometryAttribute_Type type,
                               long num_vertices, long num_components,
                               [Const] long[] att_values);
  // Deprecated.
  boolean AddMetadataToMesh(Mesh mesh, [Const] Metadata metadata);

  // From PointCloudBuilder
  long AddFloatAttribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] float[] att_values);
  long AddInt8Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                        long num_vertices, long num_components,
                        [Const] byte[] att_values);
  long AddUInt8Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] octet[] att_values);
  long AddInt16Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] short[] att_values);
  long AddUInt16Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                          long num_vertices, long num_components,
                          [Const] unsigned short[] att_values);
  long AddInt32Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                         long num_vertices, long num_components,
                         [Const] long[] att_values);
  long AddUInt32Attribute(PointCloud pc, draco_GeometryAttribute_Type type,
                          long num_vertices, long num_components,
                          [Const] unsigned long[] att_values);

  boolean AddMetadata(PointCloud pc, [Const] Metadata metadata);
  boolean SetMetadataForAttribute(PointCloud pc, long attribute_id,
                                  [Const] Metadata metadata);
};

interface Encoder {
  void Encoder();
  void SetEncodingMethod(long method);
  void SetAttributeQuantization(draco_GeometryAttribute_Type type,
                                long quantization_bits);
  void SetAttributeExplicitQuantization(draco_GeometryAttribute_Type type,
                                        long quantization_bits,
                                        long num_components,
                                        [Const] float[] origin,
                                        float range);
  void SetSpeedOptions(long encoding_speed, long decoding_speed);
  void SetTrackEncodedProperties(boolean flag);

  long EncodeMeshToDracoBuffer(Mesh mesh,
                               DracoInt8Array encoded_data);
  long EncodePointCloudToDracoBuffer(PointCloud pc, boolean deduplicate_values,
                                     DracoInt8Array encoded_data);

  // Returns the number of encoded points or faces from the last Encode
  // operation. Returns 0 if SetTrackEncodedProperties was not set to true.
  long GetNumberOfEncodedPoints();
  long GetNumberOfEncodedFaces();
};

interface ExpertEncoder {
  void ExpertEncoder(PointCloud pc);
  void SetEncodingMethod(long method);
  void SetAttributeQuantization(long att_id,
                                long quantization_bits);
  void SetAttributeExplicitQuantization(long att_id,
                                        long quantization_bits,
                                        long num_components,
                                        [Const] float[] origin,
                                        float range);
  void SetSpeedOptions(long encoding_speed, long decoding_speed);
  void SetTrackEncodedProperties(boolean flag);

  long EncodeToDracoBuffer(boolean deduplicate_values,
                           DracoInt8Array encoded_data);

  // Returns the number of encoded points or faces from the last Encode
  // operation. Returns 0 if SetTrackEncodedProperties was not set to true.
  long GetNumberOfEncodedPoints();
  long GetNumberOfEncodedFaces();
};

// Decoder

[Prefix="draco::"]
interface DecoderBuffer {
  void DecoderBuffer();
  void Init([Const] byte[] data, unsigned long data_size);
};

enum draco_AttributeTransformType {
  "draco::ATTRIBUTE_INVALID_TRANSFORM",
  "draco::ATTRIBUTE_NO_TRANSFORM",
  "draco::ATTRIBUTE_QUANTIZATION_TRANSFORM",
  "draco::ATTRIBUTE_OCTAHEDRON_TRANSFORM"
};

[Prefix="draco::"]
interface AttributeTransformData {
  void AttributeTransformData();
  long transform_type();
};

[Prefix="draco::"]
interface AttributeQuantizationTransform {
  void AttributeQuantizationTransform();
  boolean InitFromAttribute([Ref, Const] PointAttribute att);
  long quantization_bits();
  float min_value(long axis);
  float range();
};

[Prefix="draco::"]
interface AttributeOctahedronTransform {
  void AttributeOctahedronTransform();
  boolean InitFromAttribute([Ref, Const] PointAttribute att);
  long quantization_bits();
};

enum draco_StatusCode {
  "draco_Status::OK",
  "draco_Status::DRACO_ERROR",
  "draco_Status::IO_ERROR",
  "draco_Status::INVALID_PARAMETER",
  "draco_Status::UNSUPPORTED_VERSION",
  "draco_Status::UNKNOWN_VERSION",
};

[Prefix="draco::"]
interface Status {
  draco_StatusCode code();
  boolean ok();
  [Const] DOMString error_msg();
};

// Draco version of typed arrays. The memory of these arrays is allocated on the
// emscripten heap.
interface DracoFloat32Array {
  void DracoFloat32Array();
  float GetValue(long index);
  long size();
};

interface DracoUInt8Array {
  void DracoUInt8Array();
  octet GetValue(long index);
  long size();
};

interface DracoInt16Array {
  void DracoInt16Array();
  short GetValue(long index);
  long size();
};

interface DracoUInt16Array {
  void DracoUInt16Array();
  unsigned short GetValue(long index);
  long size();
};

interface DracoInt32Array {
  void DracoInt32Array();
  long GetValue(long index);
  long size();
};

interface DracoUInt32Array {
  void DracoUInt32Array();
  unsigned long GetValue(long index);
  long size();
};

interface MetadataQuerier {
  void MetadataQuerier();

  boolean HasEntry([Ref, Const] Metadata metadata,
                   [Const] DOMString entry_name);
  long GetIntEntry([Ref, Const] Metadata metadata,
                   [Const] DOMString entry_name);
  void GetIntEntryArray([Ref, Const] Metadata metadata,
                        [Const] DOMString entry_name,
                        DracoInt32Array out_values);
  double GetDoubleEntry([Ref, Const] Metadata metadata,
                        [Const] DOMString entry_name);
  [Const] DOMString GetStringEntry([Ref, Const] Metadata metadata,
                                   [Const] DOMString entry_name);

  long NumEntries([Ref, Const] Metadata metadata);
  [Const] DOMString GetEntryName([Ref, Const] Metadata metadata, long entry_id);
};

interface Decoder {
  void Decoder();
  draco_EncodedGeometryType GetEncodedGeometryType(DecoderBuffer in_buffer);

  [Const] Status DecodeBufferToPointCloud(DecoderBuffer in_buffer,
                                          PointCloud out_point_cloud);
  [Const] Status DecodeBufferToMesh(DecoderBuffer in_buffer, Mesh out_mesh);

  long GetAttributeId([Ref, Const] PointCloud pc,
                      draco_GeometryAttribute_Type type);
  long GetAttributeIdByName([Ref, Const] PointCloud pc, [Const] DOMString name);
  long GetAttributeIdByMetadataEntry([Ref, Const] PointCloud pc,
                                     [Const] DOMString name,
                                     [Const] DOMString value);

  [Const] PointAttribute GetAttribute([Ref, Const] PointCloud pc, long att_id);
  [Const] PointAttribute GetAttributeByUniqueId([Ref, Const] PointCloud pc,
                                                long unique_id);

  [Const] Metadata GetMetadata([Ref, Const] PointCloud pc);
  [Const] Metadata GetAttributeMetadata([Ref, Const] PointCloud pc,
                                        long att_id);

  boolean GetFaceFromMesh([Ref, Const] Mesh m, long face_id,
                          DracoInt32Array out_values);
  long GetTriangleStripsFromMesh([Ref, Const] Mesh m,
                                 DracoInt32Array strip_values);

  boolean GetAttributeFloat([Ref, Const] PointAttribute pa,
                            long att_index,
                            DracoFloat32Array out_values);

  boolean GetAttributeFloatForAllPoints([Ref, Const] PointCloud pc,
                                        [Ref, Const] PointAttribute pa,
                                        DracoFloat32Array out_values);

  // Deprecated, use GetAttributeInt32ForAllPoints instead.
  boolean GetAttributeIntForAllPoints([Ref, Const] PointCloud pc,
                                      [Ref, Const] PointAttribute pa,
                                      DracoInt32Array out_values);

  boolean GetAttributeInt8ForAllPoints([Ref, Const] PointCloud pc,
                                       [Ref, Const] PointAttribute pa,
                                       DracoInt8Array out_values);
  boolean GetAttributeUInt8ForAllPoints([Ref, Const] PointCloud pc,
                                        [Ref, Const] PointAttribute pa,
                                        DracoUInt8Array out_values);
  boolean GetAttributeInt16ForAllPoints([Ref, Const] PointCloud pc,
                                        [Ref, Const] PointAttribute pa,
                                        DracoInt16Array out_values);
  boolean GetAttributeUInt16ForAllPoints([Ref, Const] PointCloud pc,
                                         [Ref, Const] PointAttribute pa,
                                         DracoUInt16Array out_values);
  boolean GetAttributeInt32ForAllPoints([Ref, Const] PointCloud pc,
                                        [Ref, Const] PointAttribute pa,
                                        DracoInt32Array out_values);
  boolean GetAttributeUInt32ForAllPoints([Ref, Const] PointCloud pc,
                                         [Ref, Const] PointAttribute pa,
                                         DracoUInt32Array out_values);

  void SkipAttributeTransform(draco_GeometryAttribute_Type att_type);
};

// Format converter

interface ObjDecoder {
  void ObjDecoder();
  [Const] Status DecodeMeshFromBuffer(DecoderBuffer buffer, Mesh out_mesh);
  [Const] Status DecodePointCloudFromBuffer(DecoderBuffer buffer, PointCloud out_point_cloud);
  void set_deduplicate_input_values(boolean v);
  void set_use_metadata(boolean flag);
};
